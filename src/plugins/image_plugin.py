import base64
from src.plugins.base_plugin import BasePlugin
from src.openai_client import generate_image as dalle_generate_image
from src.mattermost_client import MattermostClient
from src.config import IMAGE_SERVICE

class ImagePlugin(BasePlugin):
    name = "image"
    description = "Generate images based on text descriptions"
    usage = "/image <description> [--service <service_name>]"

    def __init__(self):
        self.services = {
            "dalle": dalle_generate_image,
            # Add other services here, e.g.:
            # "midjourney": midjourney_generate_image,
            # "stable_diffusion": stable_diffusion_generate_image,
        }
        self.default_service = IMAGE_SERVICE

    def execute(self, args, channel_id, user_id):
        if not args:
            return f"Please provide a description for the image. Usage: {self.usage}"

        service = self.default_service
        if "--service" in args:
            service_index = args.index("--service")
            if service_index + 1 < len(args):
                service = args[service_index + 1]
                args = args[:service_index] + args[service_index + 2:]
            else:
                return "Please specify a service name after --service"

        if service not in self.services:
            return f"Unknown service: {service}. Available services: {', '.join(self.services.keys())}"

        prompt = " ".join(args)
        generate_image = self.services[service]
        image_b64 = generate_image(prompt)

        if image_b64:
            image_bytes = base64.b64decode(image_b64)
            mm_client = MattermostClient()
            file_id = mm_client.upload_file(channel_id, image_bytes, f"generated_image_{service}.png")

            if file_id:
                mm_client.post_message(channel_id, f"Here's the image generated by {service} based on: '{prompt}'", file_ids=[file_id])
                return None
            else:
                return "Failed to upload the generated image."
        else:
            return f"Failed to generate the image using {service}. Please try again."

    def initialize(self):
        print(f"Initialized {self.name} plugin with default service: {self.default_service}")

    def cleanup(self):
        print(f"Cleaning up {self.name} plugin")